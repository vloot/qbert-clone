//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""1ab26a57-07f6-4b6f-a63a-f03d4af81e17"",
            ""actions"": [
                {
                    ""name"": ""MoveUpLeft"",
                    ""type"": ""Button"",
                    ""id"": ""ce0a4142-8bb4-49ff-99fb-27c8e952622e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveUpRight"",
                    ""type"": ""Button"",
                    ""id"": ""d65d2c23-bc17-4882-bea4-ad1b9a0be0cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDownLeft"",
                    ""type"": ""Button"",
                    ""id"": ""aa582aef-e782-44c1-8886-99bfd369366f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveDownRight"",
                    ""type"": ""Button"",
                    ""id"": ""6eb39b59-1c13-4bb5-9adc-beabbc6a4452"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d6f13389-9a64-4485-8846-b8d38c556feb"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveUpLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""04d8b18b-b320-41af-9fe5-b2777ba04baf"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveUpLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ef692416-f7ae-45cc-9413-d21d2772edcf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveUpRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""36b0e34f-fdad-44a7-83d5-36edab6f3783"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveUpRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""43a801cd-8707-4658-a218-46ba745e4142"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveDownLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e0c80769-798f-4b6c-a49e-cd63735797d9"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveDownLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c68372be-711b-4636-acde-c5da7105ccda"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveDownRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""342b61e6-109e-417a-a16f-01f8f19c42d8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""MoveDownRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_MoveUpLeft = m_Movement.FindAction("MoveUpLeft", throwIfNotFound: true);
        m_Movement_MoveUpRight = m_Movement.FindAction("MoveUpRight", throwIfNotFound: true);
        m_Movement_MoveDownLeft = m_Movement.FindAction("MoveDownLeft", throwIfNotFound: true);
        m_Movement_MoveDownRight = m_Movement.FindAction("MoveDownRight", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_MoveUpLeft;
    private readonly InputAction m_Movement_MoveUpRight;
    private readonly InputAction m_Movement_MoveDownLeft;
    private readonly InputAction m_Movement_MoveDownRight;
    public struct MovementActions
    {
        private @PlayerControls m_Wrapper;
        public MovementActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveUpLeft => m_Wrapper.m_Movement_MoveUpLeft;
        public InputAction @MoveUpRight => m_Wrapper.m_Movement_MoveUpRight;
        public InputAction @MoveDownLeft => m_Wrapper.m_Movement_MoveDownLeft;
        public InputAction @MoveDownRight => m_Wrapper.m_Movement_MoveDownRight;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @MoveUpLeft.started += instance.OnMoveUpLeft;
            @MoveUpLeft.performed += instance.OnMoveUpLeft;
            @MoveUpLeft.canceled += instance.OnMoveUpLeft;
            @MoveUpRight.started += instance.OnMoveUpRight;
            @MoveUpRight.performed += instance.OnMoveUpRight;
            @MoveUpRight.canceled += instance.OnMoveUpRight;
            @MoveDownLeft.started += instance.OnMoveDownLeft;
            @MoveDownLeft.performed += instance.OnMoveDownLeft;
            @MoveDownLeft.canceled += instance.OnMoveDownLeft;
            @MoveDownRight.started += instance.OnMoveDownRight;
            @MoveDownRight.performed += instance.OnMoveDownRight;
            @MoveDownRight.canceled += instance.OnMoveDownRight;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @MoveUpLeft.started -= instance.OnMoveUpLeft;
            @MoveUpLeft.performed -= instance.OnMoveUpLeft;
            @MoveUpLeft.canceled -= instance.OnMoveUpLeft;
            @MoveUpRight.started -= instance.OnMoveUpRight;
            @MoveUpRight.performed -= instance.OnMoveUpRight;
            @MoveUpRight.canceled -= instance.OnMoveUpRight;
            @MoveDownLeft.started -= instance.OnMoveDownLeft;
            @MoveDownLeft.performed -= instance.OnMoveDownLeft;
            @MoveDownLeft.canceled -= instance.OnMoveDownLeft;
            @MoveDownRight.started -= instance.OnMoveDownRight;
            @MoveDownRight.performed -= instance.OnMoveDownRight;
            @MoveDownRight.canceled -= instance.OnMoveDownRight;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnMoveUpLeft(InputAction.CallbackContext context);
        void OnMoveUpRight(InputAction.CallbackContext context);
        void OnMoveDownLeft(InputAction.CallbackContext context);
        void OnMoveDownRight(InputAction.CallbackContext context);
    }
}
